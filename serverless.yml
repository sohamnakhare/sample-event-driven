# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sohamnakhare
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: sample-event-driven
# "service" is the name of this project. This will also be added to your AWS resource names.
service: sample-event-driven

provider:
  name: aws
  runtime: nodejs20.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - !GetAtt MyQueue.Arn
        - !GetAtt MyDeadLetterQueue.Arn

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: "*"
      - sqs:
          arn:
            Fn::GetAtt:
              - MyQueue
              - Arn
    environment:
      SQS_URL:
        Ref: MyQueue
  # consumer:
  #   handler: consumer.handler
  #   events:
  #     - sqs:
  #         arn:
  #           Fn::GetAtt:
  #             - MyQueue
  #             - Arn
  #         batchSize: 10
  #   environment:
  #     SQS_URL:
  #       Ref: MyQueue

resources:
  Resources:
    MyS3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: sample-event-driven-bucket
    MyQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: sample-event-driven.fifo
        FifoQueue: true
        VisibilityTimeout: 540
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - MyDeadLetterQueue
              - Arn
          maxReceiveCount: 5

    MyDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: sample-event-driven-dlq.fifo
        FifoQueue: true
        ContentBasedDeduplication: true